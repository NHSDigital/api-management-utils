steps:
  - template: ../components/setup-terraform.yml
    parameters:
      useCustomTerraform: $(USE_CUSTOM_TERRAFORM)
  
  - task: DownloadSecureFile@1
    displayName: 'Deploy $(SERVICE_NAME) > Download AWS config'
    inputs:
      secureFile: 'ptl_aws_config'

  - bash: |
      export SANDBOX=0
      
      if [ "$(NAMESPACE)" == "from_branchname" ]; then
        # Change reference to get from right area
        export NAMESPACE=$(BRANCH_NAME)
      else
        export NAMESPACE="$(NAMESPACE)"
      fi
      
      if [ $(FORCE_SANDBOX) == "true" ]; then
        export NAMESPACE="$NAMESPACE-sandbox"
        export SANDBOX=1
      fi
      
      if [[ $(APIGEE_ENVIRONMENT) == *"sandbox"* ]]; then
        export SANDBOX=1
      fi

      echo "Deploying $(SERVICE_ARTIFACT_NAME) to $(SERVICE_BASE_PATH) on $(ENV_URL) in namespace $NAMESPACE"

      echo "##vso[task.setvariable variable=SANDBOX]$SANDBOX"
      echo "##vso[task.setvariable variable=_NAMESPACE]$NAMESPACE"
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Info'

  - bash: |
      set -e
      
      dist_dir="$(realpath $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME))"
      proxy_vars_file=""
      
      if [ -f  ${dist_dir}/ecs-deploy-$(APIGEE_ENVIRONMENT).yml ]; then
          proxy_vars_file="${dist_dir}/ecs-deploy-$(APIGEE_ENVIRONMENT).yml"
      else
          if [ -f  ${dist_dir}/ecs-deploy-all.yml ]; then
            proxy_vars_file="${dist_dir}/ecs-deploy-all.yml"
          fi
      fi
      
      
      if [ ! -z "${proxy_vars_file}" ]; then
      
      # get primary aws config
      mkdir -p ~/.aws
      mv $(Agent.TempDirectory)/ptl_aws_config ~/.aws/config
      chmod 400 ~/.aws/config
      
      # ensure deployment pre-reqs
      source $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/.build_env_vars
      
      account=ptl SERVICE_BASE_PATH=$(SERVICE_BASE_PATH) APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT) \
      make --no-print-directory  -C utils/ansible create-api-deployment-pre-reqs
      
      # become deployment user
      aws --profile=apm_ptl secretsmanager get-secret-value --secret-id ptl/api-deploy-users/deploy-$(APIGEE_ENVIRONMENT)-${service_id}/aws_config --query SecretString --output text > ~/.aws/config.tmp
      mv -f ~/.aws/config.tmp ~/.aws/config
      chmod 400 ~/.aws/config
      
      # deploy ecs proxies
      account=ptl PROXY_VARS_FILE="${proxy_vars_file}" \
      SERVICE_BASE_PATH=$(SERVICE_BASE_PATH) APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT) \
      make --no-print-directory  -C utils/ansible deploy-ecs-proxies
      
      fi
    displayName: 'Deploy $(SERVICE_NAME) > Deploy ECS proxies'

  - bash: |
      set -euo pipefail
      
      export SERVICE_NAME="$(SERVICE_BASE_PATH)-$(_NAMESPACE)"
      export PROXIES_DIR="$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)-$(_NAMESPACE)"
      export APIGEE_ENVIRONMENT="$(APIGEE_ENVIRONMENT)"
      export DEPLOYED_VERSION=`echo $SERVICE_ARTIFACT_NAME | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+-[[:alpha:]]\+" | tail -1`
      export SOURCE_COMMIT_ID=$BUILD_SOURCEVERSION
      
      if [ -f  $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/.build_env_vars ]; then
        source $(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/.build_env_vars
      fi

      make --no-print-directory -C utils/ansible template-proxies
    displayName: 'Deploy $(SERVICE_NAME) > Template Proxies'

  - bash: |
      set -euo pipefail

      if [ "$(SANDBOX)" == 1 ]; then
        export PROXY_TYPE="sandbox"
      else
        export PROXY_TYPE="live"
      fi

      export PROXY_DIR="$(Pipeline.Workspace)/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/proxies/$PROXY_TYPE"
      export SERVICE_NAME="$(SERVICE_NAME)-$(APIGEE_ENVIRONMENT)-$(_NAMESPACE)"
      export SERVICE_BASE_PATH="$(SERVICE_BASE_PATH)-$(_NAMESPACE)"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PRODUCT_DISPLAY_NAME="$(PRODUCT_DISPLAY_NAME)"
      export PRODUCT_DESCRIPTION="$(PRODUCT_DESCRIPTION)"
      
      cd utils
      poetry run ansible-playbook ansible/deploy-apigee-proxy.yml
      poetry run ansible-playbook ansible/deploy-apigee-product.yml
    displayName: 'Deploy $(SERVICE_NAME) > Deploy Proxy'
