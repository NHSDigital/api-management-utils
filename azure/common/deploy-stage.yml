parameters:
  - name: jinja_templates
    type: object
  - name: depends_on
    type: object
  - name: stage_name
  - name: apigee_organization
  - name: environment
    values:
      - internal-dev
      - internal-dev-sandbox
      - internal-qa
      - internal-qa-sandbox
      - ref
      - dev
      - int
      - sandbox
      - prod
  - name: aws_account
  - name: service_name
  - name: short_service_name
  - name: fully_qualified_service_name
  - name: service_base_path
  - name: pr_label
    default: ''
  - name: secret_file_ids
    type: object
  - name: secret_ids
    type: object
  - name: config_ids
    type: object
  - name: proxy_path
  - name: product_display_name
  - name: product_description
  - name: spec_file
  - name: portal_api_requires_callback_url
    type: boolean
  - name: make_spec_visible
    type: boolean
  - name: friendly_api_name
  - name: ping
    type: boolean
  - name: pre_template
    type: stepList
  - name: post_template
    type: stepList
  - name: pre_deploy
    type: stepList
  - name: post_deploy
    type: stepList
  - name: notify
    type: boolean
    default: false
  - name: enable_monitoring
    type: boolean
  - name: enable_status_monitoring 
    type: boolean
  - name: _expose_blacklist
    type: object
    default:
      - _expose_blacklist
      - pre_template
      - post_template
      - pre_deploy
      - post_deploy
      - secret_file_ids
      - secret_ids
      - config_ids
      - depends_on
      - jinja_templates

stages:
  - stage: ${{ parameters.stage_name }}
    dependsOn: ${{ parameters.depends_on }}
    jobs:
      - deployment: deploy
        environment: ${{ parameters.environment }}
        pool:
          name: 'AWS-ECS'
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none

                - bash: |
                    if [ ! -z "$(ls -A \"$(Pipeline.Workspace)/s/${{ parameters.service_name }}\" 2>/dev/null)" ]; then
                      echo "workspace directory is not empty!"
                      exit 1
                    fi
                  displayName: "check workspace is clean"

                - task: DownloadPipelineArtifact@2
                  inputs:
                    source: "specific"
                    project: $(resources.pipeline.build_pipeline.projectID)
                    pipeline: $(resources.pipeline.build_pipeline.pipelineID)
                    preferTriggeringPipeline: true
                    runVersion: "latestFromBranch"
                    runBranch: $(Build.SourceBranch)
                    path: "$(Pipeline.Workspace)/s/${{ parameters.service_name }}"

                - bash: |
                    instance_id="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
                    echo instance-id: "${instance_id}"
                    echo connect to: https://eu-west-2.console.aws.amazon.com/systems-manager/session-manager/${instance_id}
                    echo sudo su - ubuntu
                    echo working directory: $(System.DefaultWorkingDirectory)
                  displayName: print aws info

                - template: ../components/aws-assume-role.yml
                  parameters:
                    role: "auto-ops"
                    profile: "apm_${{ parameters.aws_account }}"
                    aws_account: "${{ parameters.aws_account }}"

                - task: UsePythonVersion@0
                  displayName: 'Use Python 3.8'
                  inputs:
                    versionSpec: 3.8

                - template: "../components/set-facts.yml"
                  parameters:
                    service_name: ${{ parameters.service_name }}
                    secret_file_ids:
                      - ${{ each secret_file_id in parameters.secret_file_ids }}:
                          - ${{ secret_file_id }}
                    secret_ids:
                      - ${{ parameters.aws_account }}/azure-devops/apigee-${{ parameters.apigee_organization }}/APIGEE_OTP_KEY
                      - ${{ parameters.aws_account }}/azure-devops/apigee-${{ parameters.apigee_organization }}/APIGEE_PASSWORD
                      - ${{ parameters.aws_account }}/azure-devops/MONITORING_API_KEY
                      - ${{ parameters.aws_account }}/access-tokens/github/repo-status-update/GITHUB_ACCESS_TOKEN
                      - ${{ parameters.aws_account }}/monitoring/status-endpoint-api-key
                      - ${{ each secret_id in parameters.secret_ids }}:
                          - ${{ secret_id }}
                    config_ids:
                      - /${{ parameters.aws_account }}/azure-devops/apigee-${{ parameters.apigee_organization }}/APIGEE_USERNAME
                      - /${{ parameters.aws_account }}/azure-devops/env-${{ parameters.environment }}/ENV_URL
                      - /${{ parameters.aws_account }}/azure-devops/env-${{ parameters.environment }}/IDENTITY_URL
                      - /${{ parameters.aws_account }}/azure-devops/GITHUB_USER
                      - ${{ each config_id in parameters.config_ids }}:
                          - ${{ config_id }}
                    aws_account: ${{ parameters.aws_account }}

                - ${{ if parameters.notify }}:
                  - bash: |
                      export COMMIT_SHA=`echo "$(Build.SourceVersionMessage)" | cut -d' ' -f2`
                      echo "##vso[task.setvariable variable=COMMIT_SHA]$COMMIT_SHA"
                    displayName: Set COMMIT_SHA

                  - template: '../components/update-github-status.yml'
                    parameters:
                      state: pending
                      description: "Deploy to ${{ parameters.environment }} started"
                      environment: ${{ parameters.environment }}

                - ${{ each param in parameters }}:
                  - ${{ if not(containsValue(parameters._expose_blacklist, param.key)) }}:
                    - bash: |
                        set -euo pipefail
                        echo "##vso[task.setvariable variable=${{ upper(param.key) }}]${{ param.value }}"
                      displayName: Setting ${{ upper(param.key) }}=${{ param.value }}

                - bash: |
                    set -euo pipefail
                    echo "For backward compatibility..."
                    echo "##vso[task.setvariable variable=APIGEE_ENVIRONMENT]${{ parameters.environment }}"
                  displayName: Setting APIGEE_ENVIRONMENT=${{ parameters.environment }}

                - template: '../templates/deploy-service.yml'
                  parameters:
                    service_name: ${{ parameters.service_name }}
                    short_service_name: ${{ parameters.short_service_name }}
                    fully_qualified_service_name: ${{ parameters.fully_qualified_service_name }}
                    service_base_path: ${{ parameters.service_base_path }}
                    jinja_templates: ${{ parameters.jinja_templates }}
                    apigee_environment: ${{ parameters.environment }}
                    apigee_organization: ${{ parameters.apigee_organization }}
                    product_display_name: ${{ parameters.product_display_name }}
                    product_description: ${{ parameters.product_description }}
                    proxy_path: ${{ parameters.proxy_path }}
                    pre_template: ${{ parameters.pre_template }}
                    post_template: ${{ parameters.post_template }}
                    pre_deploy: ${{ parameters.pre_deploy }}
                    post_deploy: ${{ parameters.post_deploy }}
                    ping: ${{ parameters.ping }}
                    enable_monitoring: ${{ parameters.enable_monitoring }}
                    enable_status_monitoring : ${{ parameters.enable_status_monitoring  }}
                    portal_api_requires_callback_url: ${{ parameters.portal_api_requires_callback_url }}
                    make_spec_visible: ${{ parameters.make_spec_visible }}
                    friendly_api_name: ${{ parameters.friendly_api_name }}
                    spec_file: ${{ parameters.spec_file }}
                    pr_label: ${{ parameters.pr_label }}
                    aws_account: ${{ parameters.aws_account }}


                - ${{ if parameters.notify }}:
                  - template: '../components/update-github-status.yml'
                    parameters:
                      state: success
                      on_success: true
                      description: "Deploy to ${{ parameters.environment }} succeeded"
                      environment: ${{ parameters.environment }}

                  - template: '../components/update-github-status.yml'
                    parameters:
                      state: failure
                      on_failure: true
                      description: "Deploy to ${{ parameters.environment }} failed"
                      environment: ${{ parameters.environment }}
