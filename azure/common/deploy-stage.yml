parameters:
  - name: depends_on
    type: object
  - name: stage_name
  - name: apigee_organization
  - name: environment
    values:
      - internal-dev
      - internal-qa
      - internal-qa-sandbox
      - ref
      - dev
      - int
      - sandbox
      - prod
  - name: aws_env_account
  - name: aws_org_account
  - name: service_name
  - name: short_service_name
  - name: fully_qualified_service_name
  - name: service_base_path
  - name: secret_ids
    type: object
  - name: config_ids
    type: object
  - name: proxy_path
  - name: product_display_name
  - name: product_description
  - name: pre_template
    type: stepList
  - name: post_template
    type: stepList
  - name: pre_deploy
    type: stepList
  - name: post_deploy
    type: stepList

stages:
  - stage: ${{ parameters.stage_name }}
    dependsOn: ${{ parameters.depends_on }}
    jobs:
      - deployment: deploy
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                  
                - task: DownloadPipelineArtifact@2
                  inputs:
                    source: "specific"
                    project: $(resources.pipeline.build_pipeline.projectID)
                    pipeline: $(resources.pipeline.build_pipeline.pipelineID)
                    preferTriggeringPipeline: true
                    runVersion: "latestFromBranch"
                    runBranch: $(Build.SourceBranch)
                    path: "$(Pipeline.Workspace)/s/${{ parameters.service_name }}"

                - task: DownloadSecureFile@1
                  name: aws_config
                  inputs:
                    secureFile: ptl_aws_config

                - bash: |
                    set -euo pipefail
                    mkdir -p ~/.aws
                    mv $(aws_config.secureFilePath) ~/.aws/config
                    chmod 400 ~/.aws/config
                    ls -al ~/.aws/config
                  displayName: "Get AWS config"

                - task: UsePythonVersion@0
                  displayName: 'Use Python 3.8'
                  inputs:
                    versionSpec: 3.8

                - bash: "python -m pip install --upgrade pip setuptools wheel && pip install poetry"
                  displayName: Install python dependencies

                - template: "../components/set-facts.yml"
                  parameters:
                    service_name: ${{ parameters.service_name }}
                    secret_ids:
                      - ${{ parameters.aws_org_account }}/azure-devops/apigee-${{ parameters.apigee_organization }}/APIGEE_OTP_KEY
                      - ${{ parameters.aws_org_account }}/azure-devops/apigee-${{ parameters.apigee_organization }}/APIGEE_PASSWORD
                      - ptl/access-tokens/github/repo-status-update/GITHUB_ACCESS_TOKEN
                      - ${{ each secret_id in parameters.secret_ids }}:
                          - ${{ secret_id }}
                    config_ids:
                      - /${{ parameters.aws_org_account }}/azure-devops/apigee-${{ parameters.apigee_organization }}/APIGEE_USERNAME
                      - /${{ parameters.aws_env_account }}/azure-devops/env-${{ parameters.environment }}/ENV_URL
                      - /${{ parameters.aws_env_account }}/azure-devops/env-${{ parameters.environment }}/IDENTITY_URL
                      - /ptl/azure-devops/GITHUB_USER
                      - ${{ each config_id in parameters.config_ids }}:
                          - ${{ config_id }}

                - ${{ if not(endswith(parameters.stage_name, 'portal')) }}:
                  - template: "../templates/deploy-service.yml"
                    parameters:
                      service_name: ${{ parameters.service_name }}
                      short_service_name: ${{ parameters.short_service_name }}
                      fully_qualified_service_name: ${{ parameters.fully_qualified_service_name }}
                      service_base_path: ${{ parameters.service_base_path }}
                      apigee_environment: ${{ parameters.environment }}
                      apigee_organization: ${{ parameters.apigee_organization }}
                      product_display_name: ${{ parameters.product_display_name }}
                      product_description: ${{ parameters.product_description }}
                      proxy_path: ${{ parameters.proxy_path }}
                      pre_template: ${{ parameters.pre_template }}
                      post_template: ${{ parameters.post_template }}
                      pre_deploy: ${{ parameters.pre_deploy }}
                      post_deploy: ${{ parameters.post_deploy }}

                - ${{ if endswith(parameters.stage_name, 'portal') }}:
                  - template: "../templates/deploy-spec.yml"
                    parameters:
                      service_name: ${{ parameters.service_name }}
                      apigee_environment: ${{ parameters.environment }}
                      apigee_organization: ${{ parameters.apigee_organization }}
                      fully_qualified_service_name: ${{ parameters.fully_qualified_service_name }}
