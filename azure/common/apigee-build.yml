parameters:
  - name: service_name
    type: string
  - name: short_service_name
    type: string
  - name: variables
    type: object
    default: []
  - name: secret_file_ids
    type: object
    default: []
  - name: secret_ids
    type: object
    default: []
  - name: config_ids
    type: object
    default: []
  - name: test_steps
    type: stepList
    default: []
  - name: post_ecs_push
    type: stepList
    default: []
  - name: notify
    type: boolean
    default: true

jobs:
  - job: build
    displayName: Build & Test
    timeoutInMinutes: 30
    pool:
      vmImage: 'ubuntu-18.04'
    container: 'laurenceisnotawizard/api-test:latest'
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
      # Already in the image
      # PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
      ${{ each var in parameters.variables }}:
        ${{ var.key }}: ${{ var.value }}
    steps:
        # This is here as azure insists on running this before other steps in the job
        # even though it is only needed if ecs-proxies-containers.yml is present
      - task: DownloadSecureFile@1
        name: aws_config
        inputs:
          secureFile: ptl_aws_config
    
      - ${{ if parameters.notify }}:
        - bash: |
            mkdir -p ~/.aws
            mv $(aws_config.secureFilePath) ~/.aws/config
            chmod 400 ~/.aws/config
          displayName: "Get AWS config"

        - template: ../components/get-aws-secrets-and-ssm-params.yml
          parameters:
            secret_file_ids:
              - ${{ each secret_file_id in parameters.secret_file_ids }}:
                - ${{ secret_file_id }}
            secret_ids:
              - ptl/access-tokens/github/repo-status-update/GITHUB_ACCESS_TOKEN
              - ${{ each secret_id in parameters.secret_ids }}:
                - ${{ secret_id }}
            config_ids:
              - /ptl/azure-devops/GITHUB_USER
              - ${{ each config_id in parameters.config_ids }}:
                - ${{ config_id }}

        - bash: |
            echo "Build.SourceBranch: $(Build.SourceBranch)"
            echo "Build.SourceBranchName: $(Build.SourceBranchName)"
            echo "Build.SourceVersion: $(Build.SourceVersion)"
            echo "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"

            COMMIT_SHA=""

            if [[ "$(Build.SourceBranch)" =~ ^refs/tags/.+$ ]]; then
                echo "##[debug]Build appears to be a tag build"
                echo "##[debug]Using Build.SourceVersion as COMMIT_SHA"
                COMMIT_SHA="$(Build.SourceVersion)"
            fi

            if [[ "$(Build.SourceBranch)" =~ ^refs/pull/.+$ ]]; then
                echo "##[debug]Build appears to be a pull request build"
                echo "##[debug]Extracting COMMIT_SHA from Build.SourceVersionMessage"
                COMMIT_SHA=`echo "$(Build.SourceVersionMessage)" | cut -d' ' -f2`
            fi

            if [[ -z $COMMIT_SHA ]]; then
                echo "##[debug]Build does not appear to be pull or tag build"
                echo "##[debug]Using Build.SourceVersion as COMMIT_SHA"
                COMMIT_SHA="$(Build.SourceVersion)"
            fi

            echo "##vso[task.setvariable variable=COMMIT_SHA]$COMMIT_SHA"
          displayName: Set COMMIT_SHA
          condition: always()

        - template: '../components/update-github-status.yml'
          parameters:
            state: pending
            description: "Build started"

      - checkout: self
        path: "s/${{ parameters.service_name }}"
        submodules: true
        target: host

      - template: ../templates/setup-build-name.yml
        parameters:
          service_name: "${{ parameters.service_name }}"

      - task: Cache@2
        inputs:
          key: 'poetry | "$(Agent.OS)" | ${{ parameters.service_name }}/poetry.lock'
          restoreKeys: |
            poetry | "$(Agent.OS)"
            poetry
          path: "~/.cache/pip"
        displayName: Cache python packages
        continueOnError: true

      - task: Cache@2
        inputs:
          key: 'yarn | "$(Agent.OS)" | ${{ parameters.service_name }}/yarn.lock'
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          path: $(YARN_CACHE_FOLDER)
        displayName: Cache node packages
        continueOnError: true

      - bash: |
          n=0
          until [ "$n" -ge 3 ]
          do
            make install && break
            n=$((n+1))
          done
        workingDirectory: "${{ parameters.service_name }}"
        displayName: Install project dependencies

      - bash: "make check-licenses"
        workingDirectory: "${{ parameters.service_name }}"
        displayName: Check licenses

      - bash: "make lint"
        workingDirectory: "${{ parameters.service_name }}"
        displayName: Lint

      - ${{ each test_step in parameters.test_steps }}:
          - ${{ test_step }}

      - bash: "make publish"
        workingDirectory: "${{ parameters.service_name }}"
        displayName: Compile spec

      - bash: "make release"
        workingDirectory: "${{ parameters.service_name }}"
        displayName: Build release package

      - bash: |
          if [[ -f ecs-proxies-containers.yml ]]; then
            echo "##vso[task.setvariable variable=build_containers]true"
          else
            echo "##vso[task.setvariable variable=build_containers]false"
          fi
        workingDirectory: ${{ parameters.service_name }}
        displayName: "Check for ECS proxy definitions"

      - checkout: common
        path: "s/${{ parameters.service_name }}/utils"
        target: host

      - bash: "make install"
        workingDirectory: "${{ parameters.service_name }}/utils"
        displayName: "Install utils pre-requisites"
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - bash: |
          export out_dir="$(realpath ${{ parameters.service_name }}/dist)"
          export commit_hash="$(git -C ${{ parameters.service_name }} rev-parse --short HEAD)"
          # sha prefix is required docker gets upset if names contain -0 iirc
          export build_label="$(Build.BuildId)-sha${commit_hash}"
          export pr_number="$(System.PullRequest.PullRequestNumber)"
          export service_name="${{ parameters.service_name }}"
          export service_id="${{ parameters.short_service_name }}"
              make --no-print-directory -C ${{ parameters.service_name }}/utils/ansible create-build-env-vars
        displayName: output build env vars for artifact
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - bash: |
          mkdir -p ~/.aws
          mv $(aws_config.secureFilePath) ~/.aws/config
          chmod 400 ~/.aws/config
        displayName: "Get AWS config"
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - bash: |
          source "${{ parameters.service_name }}/dist/.build_env_vars"
          account=ptl make --no-print-directory -C ${{ parameters.service_name }}/utils/ansible create-ecr-build-user
        displayName: "Ensure build user"
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - bash: |
          source "${{ parameters.service_name }}/dist/.build_env_vars"
          cd ${{ parameters.service_name }}/utils
          poetry run aws --profile=apm_ptl secretsmanager get-secret-value --secret-id ptl/api-deploy-users/build-${{ parameters.short_service_name }}/aws_config --query SecretString --output text > ~/.aws/config.tmp
          mv -f ~/.aws/config.tmp ~/.aws/config
          chmod 400 ~/.aws/config
        displayName: "Become build user"
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - bash: |
          source "${{ parameters.service_name }}/dist/.build_env_vars"
          CONTAINER_VARS_FILE="$(realpath ${{ parameters.service_name }}/ecs-proxies-containers.yml)" \
          make --no-print-directory -C ${{ parameters.service_name }}/utils/ansible build-ecs-proxies
        displayName: "Build and push ECS proxies"
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - ${{ each post_ecs_push in parameters.post_ecs_push }}:
          - ${{ post_ecs_push }}

      - bash: |
          cp ${{ parameters.service_name }}/ecs-*.yml ${{ parameters.service_name }}/dist || true
        displayName: "Copy ecs-proxies-deploy configs into build artifact"
        condition: and(succeeded(), eq(variables['build_containers'], 'true'))

      - bash: |
          rsync -a utils dist --exclude .venv
        workingDirectory: "${{ parameters.service_name }}"
        displayName: "Copy utils into artifact"

      - bash: |
          if [ -d "products" ]; then
             rsync -a products dist
          fi
        workingDirectory: "${{ parameters.service_name }}"
        displayName: "Copy products into artifact"

      - bash: |
          cd ${{ parameters.service_name }}/utils
          git rev-parse HEAD > ../dist/.utils-version

      - publish: ${{ parameters.service_name}}/dist
        artifact: "$(Build.BuildNumber)"

      - ${{ if parameters.notify }}:
        - template: '../components/update-github-status.yml'
          parameters:
            state: success
            on_success: true
            description: "Build succeeded"

        - template: '../components/update-github-status.yml'
          parameters:
            state: failure
            on_failure: true
            description: "Build failed"
