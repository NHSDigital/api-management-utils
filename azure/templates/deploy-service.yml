parameters:
  - name: proxy_path
  - name: product_display_name
  - name: product_description
  - name: service_name
  - name: short_service_name
  - name: fully_qualified_service_name
  - name: apigee_environment
  - name: apigee_organization
  - name: service_base_path
  - name: jinja_templates
    type: object
  - name: ping
    type: boolean
  - name: pre_template
    type: stepList
  - name: post_template
    type: stepList
  - name: pre_deploy
    type: stepList
  - name: post_deploy
    type: stepList

steps:
  - bash: |
      ls -R
      if [[ -f ecs-proxies-deploy.yml ]]; then
        echo "##vso[task.setvariable variable=build_containers]true"
      else
        echo "##vso[task.setvariable variable=build_containers]false"
      fi
    workingDirectory: ${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)
    displayName: "Check for ECS proxy definitions"

  - bash: |
      git clone https://github.com/NHSDigital/api-management-utils.git $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils
      cd $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils
      git checkout APM-1361-ping-endpoint
    displayName: Clone utils

  - bash: "make install"
    workingDirectory: "$(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils"
    displayName: "Install utils pre-requisites"

  - bash: |
      brew install tfenv
      tfenv install 0.12.29
      tfenv use 0.12.29
    displayName: setup terraform
    condition: and(succeeded(), eq(variables['build_containers'], 'true'))

  - bash: |
      echo "Deploying ${{ parameters.service_name }} artifact $(SERVICE_ARTIFACT_NAME) as ${{ parameters.fully_qualified_service_name }} to ${{ parameters.service_base_path }} on $(ENV_URL)"
    displayName: 'Deploy Info'

  - ${{ each pre_template_step in parameters.pre_template }}:
    - ${{ pre_template_step }}

  - ${{ each jinja_template in parameters.jinja_templates }}:
    - bash: |
          set -euo pipefail

          cd $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils
          for template_file in $(egrep -lir --include=*.{xml,js} '{{  *${{ jinja_template.key }}  *}}' $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)); do
            echo Matched ${{ jinja_template.key }} in $template_file
            poetry run python scripts/template.py '{ "${{ jinja_template.key }}": "${{ jinja_template.value }}"}' --file=$template_file > /tmp/live.xml
            mv /tmp/live.xml $template_file
          done
      displayName: Templating ${{ jinja_template.key }} to ${{ jinja_template.value }}

  - bash: |
      set -euo pipefail

      export SERVICE_NAME="${{ parameters.service_name }}"
      export PROXIES_DIR="$(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/proxies"
      export SERVICE_BASE_PATH="${{ parameters.service_base_path }}"
      export APIGEE_ENVIRONMENT="${{ parameters.apigee_environment }}"
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export RELEASE_RELEASEID=$(Build.BuildId)

      if [[ $SERVICE_ARTIFACT_NAME == v* ]]; then
        export DEPLOYED_VERSION=`echo $SERVICE_ARTIFACT_NAME | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+-[[:alpha:]]\+" | tail -1`
      else
        export DEPLOYED_VERSION="${{ parameters.fully_qualified_service_name }}"
      fi

      if [ -f  $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/.build_env_vars ]; then
        source $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/.build_env_vars
      fi

      cd $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils
      poetry run ansible-playbook ansible/template-proxies.yml
    displayName: Default proxy templating

  - ${{ each post_template_step in parameters.post_template }}:
    - ${{ post_template_step}}

  - ${{ each pre_deploy_step in parameters.pre_deploy }}:
    - ${{ pre_deploy_step}}

  - bash: |
      set -e

      dist_dir="$(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)"
      proxy_vars_file=""

      if [ -f  ${dist_dir}/ecs-deploy-${{ parameters.apigee_environment }}.yml ]; then
        proxy_vars_file="${dist_dir}/ecs-deploy-${{ parameters.apigee_environment }}.yml"
      else
        if [ -f  ${dist_dir}/ecs-deploy-all.yml ]; then
          proxy_vars_file="${dist_dir}/ecs-deploy-all.yml"
        fi
      fi


      if [ ! -z "${proxy_vars_file}" ]; then
        # ensure deployment pre-reqs
        source $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/.build_env_vars

        account=ptl SERVICE_BASE_PATH=${{ parameters.service_base_path }} APIGEE_ENVIRONMENT=${{ parameters.apigee_environment }} \
        make --no-print-directory  -C $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils/ansible create-api-deployment-pre-reqs

        # become deployment user
        aws --profile=apm_ptl secretsmanager get-secret-value --secret-id ptl/api-deploy-users/deploy-${{ parameters.apigee_environment }}-${service_id}/aws_config --query SecretString --output text > ~/.aws/config.tmp
        mv -f ~/.aws/config.tmp ~/.aws/config
        chmod 400 ~/.aws/config

        # deploy ecs proxies
        # I'm not sure that SANDBOX actually does anything...
        account=ptl PROXY_VARS_FILE="${proxy_vars_file}" SERVICE_BASE_PATH=${{ parameters.service_base_path }} APIGEE_ENVIRONMENT=${{ parameters.apigee_environment }} SANDBOX=false \
        make --no-print-directory  -C $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils/ansible deploy-ecs-proxies
      fi
    displayName: Deploy ECS proxies
    condition: and(succeeded(), eq(variables['build_containers'], 'true'))

  - bash: |
      set -euo pipefail

      export PROXY_DIR="$(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/proxies/${{ parameters.proxy_path }}"
      export SERVICE_NAME="${{ parameters.fully_qualified_service_name }}"
      export SERVICE_BASE_PATH="${{ parameters.service_base_path }}"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PRODUCT_DISPLAY_NAME="${{ parameters.product_display_name }}"
      export PRODUCT_DESCRIPTION="${{ parameters.product_description }}"
      export APIGEE_ENVIRONMENT="${{ parameters.apigee_environment }}"
      export APIGEE_ORGANIZATION="nhsd-${{ parameters.apigee_organization }}"
      export PING="${{ parameters.ping }}"

      cd $(Pipeline.Workspace)/s/${{ parameters.service_name }}/$(SERVICE_ARTIFACT_NAME)/utils/ansible
      poetry run ansible-playbook deploy-apigee-proxy.yml
      poetry run ansible-playbook deploy-apigee-product.yml
    displayName: 'Deploy Proxy and Product'

  - ${{ each post_deploy_step in parameters.post_deploy }}:
    - ${{ post_deploy_step}}
