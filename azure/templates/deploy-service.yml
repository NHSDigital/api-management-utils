parameters:
  - name: proxy_path
  - name: product_display_name
  - name: product_description
  - name: service_name
  - name: short_service_name
  - name: fully_qualified_service_name
  - name: apigee_environment
  - name: apigee_organization
  - name: service_base_path
  - name: jinja_templates
    type: object
  - name: enable_monitoring
    type: boolean
  - name: enable_status_monitoring 
    type: boolean
  - name: ping
    type: boolean
  - name: pre_template
    type: stepList
  - name: post_template
    type: stepList
  - name: pre_deploy
    type: stepList
  - name: post_deploy
    type: stepList
  - name: spec_file
  - name: friendly_api_name
    default: ''
  - name: portal_api_requires_callback_url
    type: boolean
  - name: make_spec_visible
    type: boolean

steps:
  - bash: |
      ls -R
      if [[ -f ecs-deploy-${{ parameters.apigee_environment }}.yml ]] || [[ -f ecs-proxies-deploy.yml ]] || [[ -f ecs-proxies-deploy-sandbox.yml]]; then
        echo "##vso[task.setvariable variable=build_containers]true"
      else 
        echo "##vso[task.setvariable variable=build_containers]false"
      fi
    workingDirectory: "$(SERVICE_DIR)"
    displayName: "Check for ECS proxy definitions"

  - bash: |
      n=0
      until [ "$n" -ge 3 ]
      do
        make install && break
        n=$((n+1))
      done
    workingDirectory: "$(UTILS_DIR)"
    displayName: "Install utils pre-requisites"

  - bash: |
      brew install tfenv
      tfenv install 0.12.29
      tfenv use 0.12.29
    displayName: setup terraform
    condition: and(succeeded(), eq(variables['build_containers'], 'true'))

  - bash: |
      echo "Deploying ${{ parameters.service_name }} artifact $(SERVICE_ARTIFACT_NAME) as ${{ parameters.fully_qualified_service_name }} to ${{ parameters.service_base_path }} on $(ENV_URL)"
    displayName: 'Deploy Info'

  - ${{ each pre_template_step in parameters.pre_template }}:
    - ${{ pre_template_step }}

  - ${{ if parameters.jinja_templates }}:
      - bash: mkdir -p group_vars/all && touch jinja_templates.yml
        workingDirectory: "$(UTILS_DIR)/ansible/"
        displayName: Prepare extra template-proxy vars

      - ${{ each jinja_template in parameters.jinja_templates }}:
        - bash: 'echo "${{ jinja_template.key }}: ${{ jinja_template.value }}" >> jinja_templates.yml'
          workingDirectory: "$(UTILS_DIR)/ansible/group_vars/all"
          displayName: "Set ${{ jinja_template.key }} to ${{ jinja_template.value }}"

  - bash: |
      set -euo pipefail

      export SERVICE_NAME="${{ parameters.service_name }}"
      export PROXIES_DIR="$(SERVICE_DIR)/proxies"
      export SERVICE_BASE_PATH="${{ parameters.service_base_path }}"
      export APIGEE_ENVIRONMENT="${{ parameters.apigee_environment }}"
      export SOURCE_COMMIT_ID=$(Build.SourceVersion)
      export RELEASE_RELEASEID=$(Build.BuildId)

      if [[ $SERVICE_ARTIFACT_NAME == v* ]]; then
        export DEPLOYED_VERSION=`echo $SERVICE_ARTIFACT_NAME | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+-[[:alpha:]]\+" | tail -1`
      else
        export DEPLOYED_VERSION="${{ parameters.fully_qualified_service_name }}"
      fi

      if [ -f  $(SERVICE_DIR)/.build_env_vars ]; then
        source $(SERVICE_DIR)/.build_env_vars
      fi

      cd $(UTILS_DIR)
      make --no-print-directory -C ansible template-proxies
    displayName: Template proxies

  - ${{ each post_template_step in parameters.post_template }}:
    - ${{ post_template_step}}

  - ${{ each pre_deploy_step in parameters.pre_deploy }}:
    - ${{ pre_deploy_step}}

  - bash: |
      set -e

      proxy_vars_file=""

      if [ -f  $(SERVICE_DIR)/ecs-deploy-${{ parameters.apigee_environment }}.yml ]; then
        proxy_vars_file="$(SERVICE_DIR)/ecs-deploy-${{ parameters.apigee_environment }}.yml"
      else
        if [ -f  $(SERVICE_DIR)/ecs-deploy-all.yml ]; then
          proxy_vars_file="$(SERVICE_DIR)/ecs-deploy-all.yml"
        fi
      fi
      if [ ! -z "${proxy_vars_file}" ]; then
        # ensure deployment pre-reqs
        source $(SERVICE_DIR)/.build_env_vars

        account=ptl SERVICE_BASE_PATH=${{ parameters.service_base_path }} APIGEE_ENVIRONMENT=${{ parameters.apigee_environment }} \
        make --no-print-directory  -C $(UTILS_DIR)/ansible create-api-deployment-pre-reqs

        # become deployment user
        aws --profile=apm_ptl secretsmanager get-secret-value --secret-id ptl/api-deploy-users/deploy-${{ parameters.apigee_environment }}-${service_id}/aws_config --query SecretString --output text > ~/.aws/config.tmp
        mv -f ~/.aws/config.tmp ~/.aws/config
        chmod 400 ~/.aws/config

         if [[ $SERVICE_ARTIFACT_NAME == v* ]]; then
            export DEPLOYED_VERSION=`echo $SERVICE_ARTIFACT_NAME | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+-[[:alpha:]]\+" | tail -1`
         else
            export DEPLOYED_VERSION="${{ parameters.fully_qualified_service_name }}"
         fi

        # deploy ecs proxies
        # I'm not sure that SANDBOX actually does anything...
        account=ptl PROXY_VARS_FILE="${proxy_vars_file}" SOURCE_COMMIT_ID="$(Build.SourceVersion)" RELEASE_RELEASEID="$(Build.BuildId)" SERVICE_BASE_PATH=${{ parameters.service_base_path }} APIGEE_ENVIRONMENT=${{ parameters.apigee_environment }} \
        make --no-print-directory  -C $(UTILS_DIR)/ansible deploy-ecs-proxies
      fi
    displayName: Deploy ECS proxies
    condition: and(succeeded(), eq(variables['build_containers'], 'true'))

  - bash: |
      declare -A FRIENDLY_ENV_NAMES=( ["prod"]="(Production)" \
                                      ["sandbox"]="(Sandbox)" \
                                      ["int"]="(Integration Testing)" \
                                      ["dev"]="(Development)" \
                                      ["ref"]="(Reference)" \
                                      ["internal-qa"]="(Internal QA)" \
                                      ["internal-qa-sandbox"]="(Internal QA Sandbox)" \
                                      ["internal-dev"]="(Internal Development)" \
                                      ["internal-dev-sandbox"]="(Internal Development Sandbox)" \
                                    )
      export FRIENDLY_ENV="${FRIENDLY_ENV_NAMES["${{ parameters.apigee_environment }}"]}"

      if [ -z "${{ parameters.friendly_api_name }}" ]; then
        export API_NAME="${{ parameters.fully_qualified_service_name }} ${FRIENDLY_ENV}"
      else
        export API_NAME="${{ parameters.friendly_api_name }} ${FRIENDLY_ENV}"
      fi

      echo "Setting friendly name of: $API_NAME"

      echo "##vso[task.setvariable variable=FRIENDLY_NAME]$API_NAME"
    displayName: "Set Portal API Friendly Name"

  - bash: |
      set -euo pipefail

      export PROXY_DIR="$(SERVICE_DIR)/proxies/${{ parameters.proxy_path }}"
      export SERVICE_NAME="${{ parameters.fully_qualified_service_name }}"
      export SERVICE_BASE_PATH="${{ parameters.service_base_path }}"
      export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
      export PRODUCT_DISPLAY_NAME="${{ parameters.product_display_name }}"
      export PRODUCT_DESCRIPTION="${{ parameters.product_description }}"
      export APIGEE_ENVIRONMENT="${{ parameters.apigee_environment }}"
      export APIGEE_ORGANIZATION="nhsd-${{ parameters.apigee_organization }}"
      export RELEASE_RELEASEID="$(Build.BuildId)"
      export PING="${{ parameters.ping }}"
      if [[ -n "${{ parameters.spec_file }}" ]]; then
        export SPEC_FILE="$(SERVICE_DIR)/${{ parameters.spec_file }}"
      fi
      export FRIENDLY_NAME="$(FRIENDLY_NAME)"
      export VISIBLE="${{ parameters.make_spec_visible }}"
      export REQUIRE_CALLBACK_URL="${{ parameters.portal_api_requires_callback_url }}"

      make --no-print-directory -C $(UTILS_DIR)/ansible deploy-apigee-proxy
      if [[ ! -z "${PRODUCT_DISPLAY_NAME}" ]]; then
          make --no-print-directory -C $(UTILS_DIR)/ansible deploy-apigee-product-and-spec
      fi
    displayName: 'Deploy Proxy, Product and Spec'

  - ${{ if parameters.enable_monitoring }}:
      - template: '../components/curl.yml'
        parameters:
          display_name: Add monitoring endpoints
          ${{ if eq(parameters.apigee_environment, 'prod') }}:
            url: "https://api.service.nhs.uk/monitoring-sd/service"
          ${{ if not(eq(parameters.apigee_environment, 'prod')) }}:
            url: "https://internal-dev.api.service.nhs.uk/monitoring-sd/service"
          method: POST
          headers: "apikey: $(MONITORING_API_KEY)"
          body: '{ "${{ parameters.service_name }}": { "${{ parameters.apigee_environment }}": [ "${{ parameters.service_name }}@${{ parameters.apigee_environment }}=http_2xx https://${{ parameters.apigee_environment }}.api.service.nhs.uk/${{ parameters.service_base_path }}/_ping" ] } }'

  - ${{ if parameters.enable_status_monitoring  }}:
     - template: '../components/curl.yml'
       parameters:
        display_name: Add status endpoint
        ${{ if eq(parameters.apigee_environment, 'prod') }}:
         url: "https://api.service.nhs.uk/monitoring-sd/service"
        ${{ if not(eq(parameters.apigee_environment, 'prod')) }}:
         url: "https://internal-dev.api.service.nhs.uk/monitoring-sd/service"
        method: POST
        headers: "apikey: $(MONITORING_API_KEY)"
        body: '{ "${{ parameters.service_name }}": { "${{ parameters.apigee_environment }}": [ "${{ parameters.service_name }}@${{ parameters.apigee_environment }}=http_2xx https://${{ parameters.apigee_environment }}.api.service.nhs.uk/${{ parameters.service_base_path }}/_ping", "${{ parameters.service_name }}@${{ parameters.apigee_environment }}=http_2xx_with_api_key https://${{ parameters.apigee_environment }}.api.service.nhs.uk/${{ parameters.service_base_path }}/_status"  ] } }'

  - ${{ each post_deploy_step in parameters.post_deploy }}:
    - ${{ post_deploy_step}}
