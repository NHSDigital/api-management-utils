parameters:
  - name: retry
    type: string

steps:
      - template: ./aws-assume-role.yml
        parameters:
          role: "auto-ops"
          profile: "apm_ptl"

      - bash: |
          make remove-stale-locks
          export retain_hours=72
          ANSIBLE_FORCE_COLOR=yes make -C ansible remove-old-ecs-pr-deploys
          ERROR_CODE=$?
          echo ERROR_CODE - $ERROR_CODE

          if [ $ERROR_CODE -ne 0 ] ; then 
            echo "\n\nansible has unhandled error, re-trying"
            echo "##vso[task.setvariable variable=should_retry;]true"

          else
            echo "##vso[task.setvariable variable=should_retry;]false"
          fi

        displayName: "cleanup older pr deploys"
        condition: or(eq( ${{ parameters.retry }}, '0'), eq(variables['should_retry'], 'true'))

      # - bash: |
      #     make remove-stale-locks
      #     export retain_hours=72
      #     ANSIBLE_FORCE_COLOR=yes make -C ansible remove-old-ecs-pr-deploys | tee /tmp/output.txt
      #     ERROR_CODE=$?
      #     echo ERROR_CODE - $ERROR_CODE
      #     ROLE_TIMEOUT_MSG="The AWS assume role session token is due to expire"
      #     if grep -q "$ROLE_TIMEOUT_MSG" /tmp/output.txt ; then
      #       echo "stderr for ansible has the error \"$ROLE_TIMEOUT_MSG\""
      #       echo "Re-assuming role and re-running step"
      #       echo "##vso[task.setvariable variable=should_retry;]true"

      #     elif [ $ERROR_CODE -ne 0 ] ; then 
      #       echo "\n\nansible has unhandled error, re-raising"
      #       echo "##vso[task.setvariable variable=should_retry;]true"
            
      #       exit -1
      #     else
      #       echo "##vso[task.setvariable variable=should_retry;]false"
      #     fi

      #   displayName: "cleanup older pr deploys"
      #   condition: or(eq( ${{ parameters.retry }}, '0'), eq(variables['should_retry'], 'true'))
