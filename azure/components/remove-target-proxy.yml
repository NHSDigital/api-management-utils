parameters:
  - name: apigee_org
    type: string
  - name: aws_account
    type: string
  - name: aws_profile
    type: string
  - name: service_name
    type: string
  - name: service_name_short
    type: string
  - name: has_ecs_backend
    type: boolean
  - name: environment
    type: string
  - name: remove_ecr_build_role
    type: boolean
  - name: force_remove_from_apps
    type: boolean
  - name: approval_env
    type: string

stages:
  - stage: approve_then_remove_target_proxy
    displayName: Find and remove all components for ${{ parameters.service_name }} proxy in ${{ parameters.apigee_org }} org 
    dependsOn: []
    jobs:
      - deployment: build
        displayName: Find and remove all components for ${{ parameters.service_name }} proxy in ${{ parameters.apigee_org }} org
        timeoutInMinutes: 40
        pool:
          name: AWS-ECS
        environment: ${{ parameters.approval_env }}
        workspace:
          clean: all
        strategy:
            runOnce:
              deploy:
                steps:
                  - checkout: self

                  - template: ./print-aws-info.yml

                  - task: s3-cache-action@1
                    inputs:
                      key: poetry | utils | poetry.lock
                      location: ".venv"
                      debug: true
                    displayName: cache utils pre-requisites 

                  - bash: make install
                    displayName: Install project dependencies

                  - template: ./aws-assume-role.yml
                    parameters:
                      role: auto-ops
                      aws_account: ${{ parameters.aws_account }}
                      profile: ${{ parameters.aws_profile }}

                  - bash: |
                      tfenv use 0.14.6
                    displayName: setup terraform

                  - template: ./get-aws-secrets-and-ssm-params.yml
                    parameters:
                      secret_ids:
                        - ${{ parameters.aws_account }}/azure-devops/apigee-${{ parameters.apigee_org }}/APIGEE_OTP_KEY
                        - ${{ parameters.aws_account }}/azure-devops/apigee-${{ parameters.apigee_org }}/APIGEE_PASSWORD
                      config_ids:
                        - /${{ parameters.aws_account }}/azure-devops/apigee-${{ parameters.apigee_org }}/APIGEE_USERNAME
                      aws_account: ${{ parameters.aws_account }}

                  - bash: |
                      export MFA_CODE=`oathtool --totp -b "$(APIGEE_OTP_KEY)"`
                      # basic auth value here is an apigee public value .. https://docs.apigee.com/api-platform/system-administration/management-api-tokens  (not secret)
                      curl -X POST https://${{ parameters._auth_server[parameters.apigee_org] }}/oauth/token \
                        -H "Content-Type: application/x-www-form-urlencoded" \
                        -H "Accept: application/json;charset=utf-8" \
                        -H "Authorization: Basic ZWRnZWNsaTplZGdlY2xpc2VjcmV0" \
                        -d "username=$(APIGEE_USERNAME)&password=$(APIGEE_PASSWORD)&mfa_token=${MFA_CODE}&grant_type=password" | jq .access_token > .token
                      # Set token into variable
                      echo "##vso[task.setvariable variable=secret.${{ upper(parameters.apigee_org) }}_API_ACCESS_TOKEN;issecret=true]`cat .token`"
                    displayName: Get access token

                  - bash: |
                      set -euo pipefail
                      export SERVICE_NAME="${{ parameters.service_name }}"
                      export SERVICE_NAME_SHORT="${{ parameters.service_name_short }}"
                      export APIGEE_ENVIRONMENT="${{ parameters.environment }}"
                      export APIGEE_ORG="nhsd-${{ parameters.apigee_org }}"
                      export APIGEE_ACCESS_TOKEN="$(secret.${{ parameters.apigee_org }}_API_ACCESS_TOKEN)"
                      export AWS_ACCOUNT="${{ parameters.aws_account }}"
                      export AWS_PROFILE="${{ parameters.aws_profile }}"
                      export has_ecs_backend="${{ parameters.has_ecs_backend }}"
                      export remove_ecr_build_role="${{ parameters.remove_ecr_build_role }}"
                      export force_remove_from_apps="${{ parameters.force_remove_from_apps }}"
                      ANSIBLE_FORCE_COLOR=yes make -C ansible remove-target-proxy
                    displayName: "Cleanup target proxy"
                
