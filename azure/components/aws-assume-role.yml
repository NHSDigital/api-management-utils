
parameters:
  - name: 'role'
    type: string
  - name: 'profile'
    type: string
    default: ''

steps:
    - template: ./aws-clean-config.yml

    - bash: |
        set -e

        aws_role="${{ parameters.role }}"
        echo "assume role: ${aws_role}"

        if [[ "${aws_role}" != aws:aws:iam:* ]]; then
            # iam synchronisation issues can take a few to make the role appear
            for i in {1..15}; do
              if aws iam get-role --role-name ${aws_role} > /dev/null; then
                echo role exists
                break
              fi
              echo waiting for role ...
              sleep 2
            done

            account_id="$(aws sts get-caller-identity --query Account --output text)"
            aws_role="arn:aws:iam::${account_id}:role/${aws_role}"
        fi

        cp ~/.aws/config.default ~/.aws/config
        tmp_file="$(Agent.TempDirectory)/.aws.tmp.creds.json"
        aws sts assume-role --role-arn "${aws_role}" --role-session-name build-assume-role > ${tmp_file}

        echo "aws_access_key_id = $(jq -r .Credentials.AccessKeyId ${tmp_file})" >> ~/.aws/config
        echo "aws_secret_access_key = $(jq -r .Credentials.SecretAccessKey ${tmp_file})" >> ~/.aws/config
        echo "aws_session_token = $(jq -r .Credentials.SessionToken ${tmp_file})" >> ~/.aws/config

        rm ${tmp_file}

        profile="${{ parameters.profile }}"
        if [[ ! -z "${profile}" ]]; then
          echo as profile ${profile}
          sed -i "s#\[default\]#\[profile ${profile}\]#" ~/.aws/config
        fi

      displayName: assume role
      condition: and(succeeded(), ne('${{ parameters.role }}', ''))
