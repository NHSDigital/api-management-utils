- name: Get portal, all specs and all apidocs
  # These things are restfully interacted with via a unique ID, given
  # by Apigee.  We just pull them all and find the unique IDs of the
  # spec & apidoc we are interested in later.
  block:
    - name: list portals
      uri:
        url: "{{ portals_list_uri }}"
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        return_content: yes
      register: portals

    - name: set portal_id
      set_fact:
        portal_id: "{{ portals.json.data[0].id }}"

    - name: list specs
      uri:
        url: "{{ specs_list_uri }}"
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        return_content: yes
      register: specs

    - name: set folder_id
      set_fact:
        folder_id: "{{ specs.json.id }}"

    - name: get all apidocs
      uri:
        url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs"
        method: GET
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: 200
        return_content: yes
      register: apidocs

    - name: set apidocs
      set_fact:
        apidocs: "{{ apidocs.json.data }}"



- name: Get or create remote spec
  vars:
    spec_list: "{{ specs.json.contents | selectattr('name', '==', FULLY_QUALIFIED_SERVICE_NAME) | list }}"
  block:
    - name: select remote spec if it exists
      set_fact:
        existing_spec: "{{ spec_list | first }}"
      when: spec_list | length == 1

    - name: if SPEC_FILE, and no remote spec, create remote spec
      uri:
        url: "{{ specs_resource_uri }}"
        method: POST
        body:
          folder: "{{ folder_id }}"
          name: "{{ FULLY_QUALIFIED_SERVICE_NAME }}"
          kind: "Doc"
        body_format: json
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: 200
        return_content: yes
      register: new_spec
      when: existing_spec is not defined and (SPEC_FILE)
      retries: 4
      delay: 15
      until: not new_spec.failed and new_spec.status == 200

    - name: if no SPEC_FILE, and remote spec, delete it
      uri:
        url: "{{ specs_resource_uri }}/{{ existing_spec.id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: 200
      when: existing_spec is defined and not (SPEC_FILE)
      register: _resp
      retries: 4
      delay: 15
      until: not _resp.failed and _resp.status == 200

    - name: set spec
      set_fact:
        spec: "{{ existing_spec | default(new_spec.json | default( {} )) }}"

    - name: read local spec_content
      set_fact:
        spec_content: "{{ lookup('file', SPEC_FILE) | from_yaml }}"
      when: (SPEC_FILE)

    - name: put local spec_content on apigee
      uri:
        url: "{{ specs_resource_uri }}/{{ spec.id }}/content"
        method: PUT
        body: "{{ spec_content | default(omit) }}"
        body_format: json
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: 200
      when: (SPEC_FILE)
      register: _resp
      retries: 4
      delay: 15
      until: not _resp.failed and _resp.status == 200


- name: Loop over products
  block:
    - name: Set default_product
      set_fact:
        default_product:
          name: "" # FULLY_QUALIFIED_SERVICE_NAME is appended inside loop, so leave blank here
          displayName: "{{ PRODUCT_DISPLAY_NAME }}" # Environment name appended later
          description: "{{ PRODUCT_DESCRIPTION }}"
          approvalType: "{{ approval_type }}"
          proxies: "{{ proxies }}"
          attributes:
            - name: access
              value: public
            - name: ratelimit
              value: 5ps
          quota: 300
          quotaInterval: 1
          quotaTimeUnit: minute
          environments:
            - "{{ APIGEE_ENVIRONMENT }}"
          scopes: ['urn:nhsd:apim:app:jwks:{{ SERVICE_NAME }}', 'urn:nhsd:apim:user:aal3:{{ SERVICE_NAME }}' ]

    - name: List product files
      set_fact:
        # we are in dist/utils/ansible
        # want to look in dist/products
        api_product_files: "{{ lookup('fileglob', '../../products/*.yml').split(',') }}"
      ignore_errors: yes # folder may not exist in older APIs

    - name: Read product files
      set_fact:
        api_products: >-
          {{ (api_products | default([])) + [lookup('file', filename) | from_yaml] }}
      loop: "{{ api_product_files | default([]) }} "
      loop_control:
        loop_var: filename

    - name: Assert that producer defined products define 'name'
      assert:
        that:
          - product.name is defined # Each needs a unique name
                                    # (FULLY_QUALIFIED_SERVICE_NAME appended inside
                                    # loop)
        fail_msg: >-
          User defined API products must have a 'name' field
        success_msg: User defined products successfully validated.
      loop: "{{ api_products | default([]) }}"
      loop_control:
        loop_var: product

    - name: filter products not meant for this environment
      set_fact:
        api_products: "{{ api_products | default([]) | selectattr('environments', 'contains', APIGEE_ENVIRONMENT) | list }}"

    # Uses python to filter nested environments
    - name: filter environments to only include current environment
      filter_api_products:
        products: "{{ api_products }}"
        environment: "{{ APIGEE_ENVIRONMENT }}"
      register: filter_products_result

    - name: set api_products as filtered products
      set_fact:
        api_products: "{{ filter_products_result.meta.products }}"

    - name: use default_product if api_products is empty
      set_fact:
        api_products: "{{ [default_product] }}"
      when: (api_products | default([]) | length) < 1

    - name: assert all product names are unique
      assert:
        that:
          - "{{ api_products | map(attribute='name') | unique | count == api_products | count }}"
        fail_msg: User defined API products do not have unique names
        success_msg: API Product names are unique

    - name: deploy products
      include_tasks: deploy-product-and-apidoc.yml
      loop: "{{ api_products }}"
      loop_control:
        loop_var: _product
