# Assumes _product (the loop var) and default_product (fact) are set

- name: Create/update product
  block:
    - name: Set default values for product
      set_fact:
        product: "{{ default_product | combine(_product, recursive=True) }}"

    - name: Set default attributes on product
      vars:
        def_attrs: "{{ default_product.attributes | map(attribute='name') | list }}"
        attrs: "{{ product.attributes | map(attribute='name') | list }}"
        missing_attrs: "{{ def_attrs | difference(attrs) }}"
      set_fact:
        product: >
          {{ product
             | combine({'attributes' : product.attributes + default_product['attributes'] | selectattr('name', 'match', name) },
                       recursive=True) }}
      loop: "{{ missing_attrs }}"
      loop_control:
        loop_var: name

    - name: Append (friendly) environment name to product (display) name
      vars:
        qualified_product_name: >-
          {{
                product.name | ternary(SERVICE_NAME + '-' + product.name,
                                       SERVICE_NAME)
          }}
        qualified_display_name: >-
          {{ ('-pr-' in SERVICE_NAME) | ternary(qualified_product_name, product.displayName) }} ({{ env_names[APIGEE_ENVIRONMENT] }} Environment)
      set_fact:
        product: >-
          {{ product | combine({'displayName': qualified_display_name,
                                'name': qualified_product_name }) }}

    - name: see if product already exists
      uri:
        url: "{{ apis_apiproducts_uri + '/' + product.name }}"
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: [200, 404] # 404 is a useful response, and we don't want to crash on it
        return_content: yes
      register: check_product_response

    - name: create/update product
      vars:
        should_create: "{{ check_product_response.status == 404 }}"
        apiproduct_method: "{{ should_create | ternary('POST', 'PUT') }}"
        apiproduct_uri: >-
          {{
              should_create | ternary(apis_apiproducts_uri,
                                      apis_apiproducts_uri + '/' + product.name)
          }}
      uri:
        url: "{{ apiproduct_uri }}"
        method: "{{ apiproduct_method }}"
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        body_format: json
        body: "{{ product }}"
        status_code: [200, 201]
      register: create_or_update_product
      retries: 4
      delay: 15
      until: not create_or_update_product.failed and create_or_update_product.status in (200, 201)

# Now API Product exists, we need to put it in the portal.  Portal is
# populated by (what we are calling) apidoc objects. An `apidoc`
# object maps products to specs. This API is not documented in Apigee
# and was discovered by monitoring calls made by the Apigee Edge UI.

- name: Create/update apidoc
  block:
    - name: get existing apidocs
      set_fact:
        existing_apidocs: "{{ apidocs | selectattr('edgeAPIProductName', '==', product.name)  | list }}"

    - name: assert only 0 or 1 existing doc!
      assert:
        that:
          - "{{ existing_apidocs | length >= 0 }}"
          - "{{ existing_apidocs | length <= 1 }}"

    - name: set local apidoc and prepare create/update request body
      set_fact:
        apidoc: "{{ ((existing_apidocs | length) == 1) | ternary(existing_apidocs | first, {} ) }}"
        request_body:
          anonAllowed: "True"
          description: "{{ product.description }}"
          edgeAPIProductName: "{{ product.name }}"
          requireCallbackUrl: "{{ REQUIRE_CALLBACK_URL }}"
          title: "{{ FRIENDLY_NAME }}"
          visibility: "{{ VISIBLE }}"
          specContent: "{{ spec.id | default('') }}"
          specId: "{{ (spec) | ternary(product.name, '') }}"

    - name: create remote apidoc
      include: create-api-doc.yml
      when: apidoc | length == 0
#      retries: 4
#      delay: 15
#      until: not create_apidoc.failed and create_apidoc.status == 200

    - name: update remote apidoc
      include: update-api-doc.yml
      when: apidoc | length > 0

    - name: Update remote snapshot
      uri:
        url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs/{{ apidoc.id }}/snapshot"
        method: "{{ (SPEC_FILE) | ternary('PUT', 'DELETE') }}"
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: 500
      register: snapshot

    - name: get all apidocs, on snapshot update
      uri:
        url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs"
        method: GET
        headers:
          Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
        status_code: 200
        return_content: yes
      register: apidocs
      when: apidoc | length > 0

    - name: set apidocs, on snapshot update
      set_fact:
        apidocs: "{{ apidocs.json.data }}"
      when: apidoc | length > 0

    - name: get existing apidocs, on snapshot update
      set_fact:
        existing_apidocs: "{{ apidocs | selectattr('edgeAPIProductName', '==', product.name) | list }}"
      when: apidoc | length > 0

    - name: assert snapshot has been updated
      assert:
        that:
          - "{{ (existing_apidocs[0].snapshotModified / 1000) - (ansible_date_time.epoch | int) < 30 }}"
      when: apidoc | length > 0
