# Expects product.name to be defined (from deploy-spec)
- name: list portals
  uri:
    url: "{{ portals_list_uri }}"
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    return_content: yes
  register: portals

- name: set portal_id
  set_fact:
    portal_id: "{{ portals.json.data[0].id }}"







- name: list specs
  uri:
    url: "{{ specs_list_uri }}"
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    return_content: yes
  register: specs

- name: set folder_id
  set_fact:
    folder_id: "{{ specs.json.id }}"

- name: set spec_names
  set_fact:
    spec_names: "{{ specs.json.contents | map(attribute='name') | list }}"

- name: set spec_content
  set_fact:
    spec_content: "{{ lookup('file', SPEC_FILE) }}"
  when: SPEC_FILE | bool

- name: set spec_content
  set_fact:
    spec_content: null
  when: not (SPEC_FILE | bool)

- name: if not exists, create spec...
  uri:
    url: "{{ specs_resource_uri }}"
    method: POST
    body: '{"folder": "{{ folder_id }}", "name": "{{ product.name }}", "kind": "Doc"}'
    body_format: json
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    status_code: 200
    return_content: yes
  register: spec
  when: spec_content and (product.name not in spec_names)

- name: ... and get spec_id from response
  set_fact:
    spec_id: "{{ spec.json.id }}"
  when: spec_content and product.name not in spec_names

- name: if exists, set spec_id
  set_fact:
    spec_id: "{{ specs.json.contents | json_query(_query) | first }}"
  vars:
    _query: "[? name=='{{ product.name }}'].id"
  when: spec_content and product.name in spec_names

- name: create/update spec file
  uri:
    url: "{{ specs_resource_uri }}/{{ spec_id }}/content"
    method: PUT
    body: "{{ spec_content }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    status_code: 200
  when: spec_content








- name: get portal objects (product/spec combo)
  uri:
    url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs"
    method: GET
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    status_code: 200
    return_content: yes
  register: apidocs

- name: Get list of names of portal objects (same as product names)
  set_fact:
    apidoc_names: "{{ apidocs.json.data | map(attribute='apiId') | list }}"

- name: if apidoc does not exist in portal, create it
  uri:
    url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs"
    method: POST
    body:
      anonAllowed: "True"
      description: "{{ product.description }}"
      edgeAPIProductName: "{{ product.name }}"
      requireCallbackUrl: "{{ REQUIRE_CALLBACK_URL }}"
      specContent: "{{ spec_id }}"
      specId: "{{ product.name }}"
      title: "{{ FRIENDLY_NAME }}"
      visibility: "{{ VISIBLE }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    status_code: 200
  when: product.name not in apidoc_names

# If it does exist, get ID
- name: if portal object already exists, get id...
  set_fact:
    apidoc_id: "{{ apidocs.json.data | json_query(_query) | first }}"
  vars:
    _query: "[? apiId=='{{ product.name }}'].id"
  when: product.name in apidoc_names

# and update existing...
- name: ... and update it...
  uri:
    url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs/{{ apidoc_id }}"
    method: PUT
    body:
      anonAllowed: "True"
      description: ""
      edgeAPIProductName: "{{ product.name }}"
      requireCallbackUrl: "{{ REQUIRE_CALLBACK_URL }}"
      specContent: "{{ spec_id }}"
      specId: "{{ product.name }}"
      title: "{{ FRIENDLY_NAME }}"
      visibility: "{{ VISIBLE }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    status_code: 200
  when: product.name in apidoc_names

- name: ... ensuring latest spec snapshot
  uri:
    url: "{{ portals_base_uri }}/{{ portal_id }}/apidocs/{{ apidoc_id }}/snapshot"
    method: PUT
    headers:
      Authorization: "Bearer {{ APIGEE_ACCESS_TOKEN }}"
    status_code: 200
  when: product.name in apidoc_names
