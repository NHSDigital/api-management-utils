- name: check service_id max length
  fail:
    msg: "service_id is too long"
  when: (service_id | length) > 40

- name: check if user exists
  command: "{{ aws_cmd }} iam get-user --user-name {{ build_user_name }} --query User"
  register: get_user
  changed_when: no
  failed_when: get_user.rc !=0 and 'NoSuchEntity' not in get_user.stderr

- name: create iam user
  command: "{{ aws_cmd }} iam create-user --user-name {{ build_user_name }} --query User"
  register: create_user
  when: get_user.rc == 255

- name: parse user json
  set_fact:
    iam_user: "{{ (create_user.stdout if get_user.rc == 255 else get_user.stdout)  | from_json }}"

- name: get deploy user policy
  command: >
    {{ aws_cmd }} iam get-user-policy --user-name {{ build_user_name }}
    --policy-name {{ aws_ecs_policy_name }} --query PolicyDocument
  register: get_user_policy
  changed_when: no
  failed_when: get_user_policy.rc !=0 and 'NoSuchEntity' not in get_user_policy.stderr

- name: check if policy needs updating
  set_fact:
    needs_update: "{{ get_user_policy.rc == 255 or (get_user_policy.stdout | from_json) != aws_ecs_policy }}"

- name: update user policy
  block:
    - name: create temporary file
      tempfile:
        state: file
        suffix: temp
      register: policy_json

    - name: write policy json
      copy:
        content: "{{ aws_ecs_policy | to_json }}"
        dest: "{{ policy_json.path }}"

    - name: put deploy user policy
      command: >
        {{ aws_cmd }} iam  put-user-policy --user-name {{ build_user_name }}
        --policy-name {{ aws_ecs_policy_name }} --policy-document file://{{ policy_json.path }}
  when: needs_update
  always:
    - name: remove temp file
      file:
        path: "{{ policy_json.path }}"
        state: absent
      when: policy_json.path is defined

- name: check for access key secret
  command: "{{ aws_cmd }} secretsmanager describe-secret --secret-id {{ build_user_secret }}"
  register: describe_secret
  changed_when: no
  failed_when: describe_secret.rc !=0 and 'ResourceNotFoundException' not in describe_secret.stderr


# todo: we should make these rotate frequently
- name: create an access key
  command: "{{ aws_cmd }} iam create-access-key --user-name {{ build_user_name }} --query AccessKey"
  register: create_access_key
  when: describe_secret.rc == 255

- name: parse access key
  set_fact:
    access_key: "{{ create_access_key.stdout | from_json }}"
  when: describe_secret.rc == 255

- name: create access token secret
  block:

    - name: write aws config
      copy:
        content: |
          [profile {{ build_user_name }}]
          aws_access_key_id = {{ access_key.AccessKeyId }}
          aws_secret_access_key = {{ access_key.SecretAccessKey }}
          region = eu-west-2
          output = json
        dest: "~/.tmp-aws-config"
        mode: 0400

    - name: create secret
      command: "{{ aws_cmd }} secretsmanager create-secret --name {{ build_user_secret }} --secret-string file://~/.tmp-aws-config"

  when: describe_secret.rc == 255
  always:
    - name: remove temp aws config
      file:
        path: "~/.tmp-aws-config"
        state: absent
