
- name: print workspace
  debug: msg="workspace - {{ workspace }}"

- name: create temporary directory
  tempfile:
    state: directory
  register: temp_dir


- name: set output dir ( allows override with  temp_out_dir )
  set_fact:
    out_dir: "{{ lookup('env', 'temp_out_dir') + '/_deploy' if lookup('env', 'temp_out_dir') else temp_dir.path }}"

- name: clean out dir
  file:
    path: "{{ out_dir }}"
    state: absent
  when: out_dir != temp_dir.path

- name: template terraform
  block:

    - name: template directories
      file:
        path: "{{ out_dir }}/{{ item.path }}"
        state: directory
        mode: '{{ item.mode }}'
      with_filetree: "{{ '../templates' }}"
      when: item.state == 'directory'

    - name: template files
      template:
        src: '{{ item.src }}'
        dest: "{{ out_dir }}/{{ item.path }}"
        mode: '{{ item.mode }}'
      with_filetree: "{{ '../templates' }}"
      when: item.state == 'file'

    - name: terraform init
      shell: "make -C {{ out_dir }}/terraform clean init" # noqa 305
      when: not do_not_terraform

    - name: terraform destroy
      shell: "make -C {{ out_dir }}/terraform apply args='-no-color -lock-timeout=30m --auto-approve' tf-command=destroy" # noqa 305
      register: tfapply
      when: not do_not_terraform

  rescue:
    - name: output plan
      debug:
        var: tfplan.stdout_lines
      when: tfplan is defined

    - name: output apply
      debug:
        var: tfapply.stdout_lines
      when: tfapply is defined

    - name: output plan
      debug:
        var: tfplan.stderr_lines
      when: tfplan is defined

    - name: output apply
      debug:
        var: tfapply.stderr_lines
      when: tfapply is defined

    - name: force fail
      fail:
        msg: terraform failed

  always:
    - name: remove temp dir
      file:
        path: "{{ temp_dir.path }}"
        state: absent