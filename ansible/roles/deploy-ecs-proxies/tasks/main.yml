
- name: check build_label
  fail: msg="you must specify an build_label"
  when: not build_label

- name: create temporary directory
  tempfile:
    state: directory
  register: temp_dir

- name: setup version info
  set_fact:
    version_info: >-
      {{
        {
          "build_label": build_label,
          "apigee_base_uri": "https://" + APIGEE_HOSTNAME + "/" + SERVICE_BASE_PATH,
          "version": lookup('env', 'DEPLOYED_VERSION'),
          "releaseId": lookup('env', 'RELEASE_RELEASEID'),
          "commitId": lookup('env', 'SOURCE_COMMIT_ID')
        }
      }}

- name: get_ptl_account_id
  command: >
    aws --region eu-west-2 ssm get-parameter --name /account-ids/ptl --query Parameter.Value --output text
  register: get_ptl_account_id
  changed_when: no

- name: get_prod_account_id
  command: >
    aws --region eu-west-2 ssm get-parameter --name /account-ids/prod --query Parameter.Value --output text
  register: get_prod_account_id
  changed_when: no

- name: set account ids
  set_fact:
    PTL_ACCOUNT_ID: "{{ get_ptl_account_id.stdout }}"
    PROD_ACCOUNT_ID: "{{ get_prod_account_id.stdout }}"

- name: parse ecs_service
  set_fact:
    ecs_service: "{{ docker_service | as_ecs_service }}"

- name: set output dir ( allows override with  temp_out_dir )
  set_fact:
    out_dir: "{{ lookup('env', 'temp_out_dir') + '/_deploy' if lookup('env', 'temp_out_dir') else temp_dir.path }}"

- name: clean out dir
  file:
    path: "{{ out_dir }}"
    state: absent
  when: out_dir != temp_dir.path

- name: template terraform
  block:

    - name: template directories
      file:
        path: "{{ out_dir }}/{{ item.path }}"
        state: directory
        mode: '{{ item.mode }}'
      with_filetree: "{{ '../templates' }}"
      when: item.state == 'directory'

    - name: template proxies files
      template:
        src: '{{ item.src }}'
        dest: "{{ out_dir }}/{{ item.path }}"
        mode: '{{ item.mode }}'
      with_filetree: "{{ '../templates' }}"
      when: item.state == 'file'

    - name: terraform plan
      shell: "make -C {{ out_dir }}/terraform clean plan args='-no-color -out tfplan.out'" # noqa 305
      register: tfplan
      failed_when: tfplan.rc not in (0, 2)
      when: not do_not_terraform

    - name: terraform apply
      shell: "make -C {{ out_dir }}/terraform apply-plan args='-no-color --auto-approve tfplan.out'" # noqa 305
      register: tfapply
      when: not do_not_terraform

  rescue:
    - name: output plan
      debug:
        var: tfplan.stdout_lines
      when: tfplan is defined

    - name: output apply
      debug:
        var: tfapply.stdout_lines
      when: tfapply is defined

    - name: output plan
      debug:
        var: tfplan.stderr_lines
      when: tfplan is defined

    - name: output apply
      debug:
        var: tfapply.stderr_lines
      when: tfapply is defined

    - name: force fail
      fail:
        msg: terraform failed

  always:
    - name: remove temp dir
      file:
        path: "{{ temp_dir.path }}"
        state: absent