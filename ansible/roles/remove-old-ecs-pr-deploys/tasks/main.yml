
- name: get all namedspaced deployments
  command: >
    {{ aws_cmd }} resourcegroupstaggingapi get-resources --tag-filters Key=api-is-namespaced,Values=true
    --resource-type-filters elasticloadbalancing:targetgroup --query
    'ResourceTagMappingList[].Tags[?Key==`api-environment`||Key==`api-namespaced-name`||Key==`api-service`].Value'
  changed_when: no
  register: get_all_namespaced_services
  when: (target_service_id | length) == 0

- name: get namedspaced deployments for {{ target_service_id }}
  command: >
    {{ aws_cmd }} resourcegroupstaggingapi get-resources --tag-filters Key=api-is-namespaced,Values=true
    --resource-type-filters elasticloadbalancing:targetgroup --query
    'ResourceTagMappingList[?Tags[?Value==`{{ target_service_id }}`]][].Tags[?Key==`api-environment`||Key==`api-namespaced-name`||Key==`api-service`].Value'
  changed_when: no
  register: get_service_namespaced_services
  when: (target_service_id | length) > 0

- name: parse services
  set_fact:
    ns_service_tuples: "{{ (get_service_namespaced_services.stdout if (target_service_id | length) > 0 else get_all_namespaced_services.stdout) | from_json }}"

- name: get terraform version
  command: terraform --version
  register: terraform_version

- name: print terraform version
  debug: msg="{{ terraform_version.stdout }}"

- name: switching ECS destroy to soft-fail
  set_fact:
    destroy_ecs_proxies_soft_fail: true
    terraform_lock_timeout_mins: 0

- name: maybe remove deployment
  include: remove-ecs-deployment.yml
  with_list: "{{ ns_service_tuples }}"
  loop_control:
    loop_var: ns_service_tuple

- set_fact:
    num_failures: "{{ destroy_ecs_proxies_failures | default({}) | dict2items | length }}"

- debug: var=destroy_ecs_proxies_failures
  when: num_failures | int > 0

- fail:
    msg: "failed to destroy some ecs pr proxies"
  when: num_failures | int > 0
